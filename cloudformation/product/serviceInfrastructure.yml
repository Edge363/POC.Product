AWSTemplateFormatVersion: 2010-09-09
Parameters:
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  ApplicationName:
    Type: 'String'
    Description: Name of Application to be launched.
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: Select a VPC that allows instances access to the Internet.
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '1'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
    ConstraintDescription: Please choose a valid instance type.
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-eca289fb
Resources:
  ####################SHARED RESOURCES####################
  ####################SHARED RESOURCES####################
  ####################SHARED RESOURCES####################
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
  RandonLinkRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt RandonLinkECSALB.DNSName
        HostedZoneId: !GetAtt RandonLinkECSALB.CanonicalHostedZoneID
      HostedZoneId: Z1P7IXC8UCSOZR
      Comment: 'DNS name for my instance.'
      Name: 'randon.link'
      Type: A
  ECSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:CreateCluster'
                  - 'ecs:DeregisterContainerInstance'
                  - 'ecs:DiscoverPollEndpoint'
                  - 'ecs:Poll'
                  - 'ecs:RegisterContainerInstance'
                  - 'ecs:StartTelemetrySession'
                  - 'ecs:Submit*'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ecr:*'
                  - 'dynamodb:*'
                Resource: '*'
  AutoscalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                Resource: '*'
  ProductServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: product-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                  - 'ec2:Describe*'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'dynamodb:*'
                Resource: '*'
  ECSAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: 
        - !ImportValue publicsubnetoneID
        - !ImportValue publicsubnettwoID
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: '1'
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap 
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMIID
      SecurityGroups:
        - !ImportValue randonlinkfrontendSGID
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref ECSEC2InstanceProfile
      KeyName: !Ref KeyName
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash -xe

          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

          yum install -y aws-cfn-bootstrap

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource
          ECSAutoScalingGroup --region ${AWS::Region}
  ECSEC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole
  RandonLinkfrontendSGALBports:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !ImportValue randonlinkfrontendSGID
      IpProtocol: tcp
      FromPort: '31000'
      ToPort: '61000'
      SourceSecurityGroupId: !ImportValue randonlinkfrontendSGID
  RandonLinkECSALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: RandonLinkECSALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - !ImportValue publicsubnetoneID
        - !ImportValue publicsubnettwoID
      SecurityGroups:
        - !ImportValue randonlinkfrontendSGID
  RandonLinkALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ProductTG
      LoadBalancerArn: !Ref RandonLinkECSALB
      Port: '80'
      Protocol: HTTP
  ####################NON-SHARED RESOURCES####################
  ####################NON-SHARED RESOURCES####################
  ####################NON-SHARED RESOURCES####################
  #This has non shared resources for convenience when defining default values. To be moved and replaced with UI frontend at a later date
  ProductALBListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    DependsOn: RandonLinkALBListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ProductTG
      Conditions:
        - Field: path-pattern
          Values:
            - /product
      ListenerArn: !Ref RandonLinkALBListener
      Priority: 1
  ProductTG:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: RandonLinkECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ProductTG
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
  ProductService:
    Type: 'AWS::ECS::Service'
    DependsOn: RandonLinkALBListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: '1'
      LoadBalancers:
        - ContainerName: !Ref ApplicationName
          ContainerPort: '80'
          TargetGroupArn: !Ref ProductTG
      Role: !Ref ProductServiceRole
      TaskDefinition: !Ref ProductTaskDefinition
  ProductServiceScalingTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    DependsOn: ProductService
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Join 
        - ''
        - - ProductService/
          - !Ref ECSCluster
          - /
          - !GetAtt 
            - ProductService
            - Name
      RoleARN: !GetAtt 
        - AutoscalingRole
        - Arn
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  ProductServiceScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ProductServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 200
  ProductServiceAlarmScaleUp:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
      Period: '60'
      AlarmActions:
        - !Ref ProductServiceScalingPolicy
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt 
            - RandonLinkECSALB
            - LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold
      MetricName: HTTPCode_ELB_5XX_Count
  ProductCloudwatchLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join 
        - '-'
        - - ECSLogGroup
          - !Ref 'AWS::StackName'
      RetentionInDays: 1
  ProductTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - !Ref ApplicationName
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Cpu: '10'
          Essential: 'true'
          Image: !Join ['',['288372509437.dkr.ecr.us-east-1.amazonaws.com/', !Ref ApplicationName , ':latest']]
          Memory: '300'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ProductCloudwatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref ApplicationName
          MountPoints:
            - ContainerPath: /usr/local/apache2/htdocs
              SourceVolume: my-vol
          PortMappings:
            - ContainerPort: 80
      Volumes:
        - Name: my-vol
Outputs:
  ProductService:
    Value: !Ref ProductService
  ECSCluster:
    Value: !Ref ECSCluster
  RandonLinkECSALB:
    Description: Your ALB DNS URL
    Value: !Ref RandonLinkECSALB
  ProductTaskDefinition:
    Value: !Ref ProductTaskDefinition
  AutoScalingRoleArn:
    Value: !Ref AutoscalingRole.Arn
    